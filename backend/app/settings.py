"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables with defaults
HOST_DOMAIN = os.getenv('HOST_DOMAIN', 'localhost')
HOST_IP = os.getenv('HOST_IP', '127.0.0.1')
FRONTEND_PORT = os.getenv('FRONTEND_PORT', '3000')
BACKEND_PORT = os.getenv('BACKEND_PORT', '8000')
NGINX_PORT = os.getenv('NGINX_PORT', '80')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-j*#ciu0i$6cooql@go4_xcx=3bupez6jnpntxtsh94in^2+f=_')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes', 'on')

# Build allowed hosts dynamically
ALLOWED_HOSTS = ['*']  # For development only


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',    
    'authentication',
    'physiotherapist',    
    'student',
    'modality',
    'schedule',
    'payment',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be at the top
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'fisiopilates'),
        'USER': os.environ.get('DB_USER', 'fisiouser'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'fisiopass'),
        'HOST': os.environ.get('DB_HOST', 'db'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings - Dynamic based on environment
CORS_ALLOWED_ORIGINS = [
    f"http://{HOST_DOMAIN}:{FRONTEND_PORT}",
    f"http://{HOST_IP}:{FRONTEND_PORT}",
    f"http://{HOST_DOMAIN}:{NGINX_PORT}",
    f"http://{HOST_IP}:{NGINX_PORT}",
    f"http://{HOST_DOMAIN}",
    f"http://{HOST_IP}",
]

# If in production and HTTPS is enabled, add HTTPS origins
if not DEBUG:
    CORS_ALLOWED_ORIGINS.extend([
        f"https://{HOST_DOMAIN}:{FRONTEND_PORT}",
        f"https://{HOST_IP}:{FRONTEND_PORT}",
        f"https://{HOST_DOMAIN}:{NGINX_PORT}",
        f"https://{HOST_IP}:{NGINX_PORT}",
        f"https://{HOST_DOMAIN}",
        f"https://{HOST_IP}",
    ])

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
    'expires',
]

CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-csrftoken',
]

# PWA Support - Service Worker
CORS_ALLOW_HEADERS += [
    'service-worker',
    'sw-registration-scope',
]

# Security settings - Dynamic based on environment
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = 'csrftoken'
CSRF_COOKIE_SECURE = not DEBUG  # True in production
CSRF_TRUSTED_ORIGINS = [
    f"http://{HOST_DOMAIN}:{FRONTEND_PORT}",
    f"http://{HOST_IP}:{FRONTEND_PORT}",
    f"http://{HOST_DOMAIN}:{NGINX_PORT}",
    f"http://{HOST_IP}:{NGINX_PORT}",
    f"http://{HOST_DOMAIN}",
    f"http://{HOST_IP}",
]

# If in production and HTTPS is enabled, add HTTPS origins
if not DEBUG:
    CSRF_TRUSTED_ORIGINS.extend([
        f"https://{HOST_DOMAIN}:{FRONTEND_PORT}",
        f"https://{HOST_IP}:{FRONTEND_PORT}",
        f"https://{HOST_DOMAIN}:{NGINX_PORT}",
        f"https://{HOST_IP}:{NGINX_PORT}",
        f"https://{HOST_DOMAIN}",
        f"https://{HOST_IP}",
    ])

# PWA Cache Headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Static files for PWA
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # True in production
SESSION_COOKIE_DOMAIN = None  # This will use the current domain

# Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ],
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}
