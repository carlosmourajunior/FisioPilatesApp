version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME:-fisiopilates}
      - POSTGRES_USER=${DB_USER:-fisiouser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-fisiopass}
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      - DEBUG=${DEBUG:-1}
      - DJANGO_ALLOWED_HOSTS=${HOST_DOMAIN:-localhost},${HOST_IP:-127.0.0.1},backend,*
      - CORS_ALLOWED_ORIGINS=http://${HOST_DOMAIN:-localhost}:${FRONTEND_PORT:-3000},http://${HOST_IP:-127.0.0.1}:${FRONTEND_PORT:-3000}
      - CSRF_TRUSTED_ORIGINS=http://${HOST_DOMAIN:-localhost}:${FRONTEND_PORT:-3000},http://${HOST_IP:-127.0.0.1}:${FRONTEND_PORT:-3000}
      - DB_NAME=${DB_NAME:-fisiopilates}
      - DB_USER=${DB_USER:-fisiouser}
      - DB_PASSWORD=${DB_PASSWORD:-fisiopass}
      - DB_HOST=db
      - DB_PORT=5432
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL to be ready...' &&
        while ! python -c 'import psycopg2; psycopg2.connect(host=\"db\", database=\"fisiopilates\", user=\"fisiouser\", password=\"fisiopass\")' 2>/dev/null; do
          echo 'PostgreSQL is unavailable - sleeping' &&
          sleep 1;
        done &&
        echo 'PostgreSQL is up - executing migrations' &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000"    depends_on:
      - db
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_PWA=${REACT_APP_PWA:-true}
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: